# -*- coding: utf-8 -*-
"""LDA_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uB9-NtEYT801K7PFKv7qh-c9Yf5Fdiex

Import libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.preprocessing import StandardScaler
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.decomposition import PCA
import seaborn as sns

"""Load the Iris Dataset"""

iris = datasets.load_iris()
X = iris.data  # Features
y = iris.target  # Labels
target_names = iris.target_names  # Class names
print("Feature Data (first 5 rows):\n", X[:5])
print("Target Labels (first 5):\n", y[:5])
print("Class Names:", target_names)

"""Standardize"""

scaler = StandardScaler()
X_standardized = scaler.fit_transform(X)
print("Standardized Feature Data (first 5 rows):\n", X_standardized[:5])

lda = LinearDiscriminantAnalysis(n_components=2)
X_lda = lda.fit_transform(X_standardized, y)
print("LDA Transformed Data (first 5 rows):\n", X_lda[:5])

"""**Visualization of LDA**"""

plt.figure(figsize=(10, 5))
colors = ['r', 'g', 'b']
for i, color, label in zip(range(len(target_names)), colors, target_names):
    plt.scatter(X_lda[y == i, 0], X_lda[y == i, 1], alpha=0.8, color=color, label=label)
plt.xlabel("LDA Component 1")
plt.ylabel("LDA Component 2")
plt.title("LDA: Iris Data Projection")
plt.legend()
plt.show()

"""**Apply PCA**"""

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_standardized)
print("PCA Transformed Data (first 5 rows):\n", X_pca[:5])

"""**Comparision of LDA and PCA**"""

# Standardize the data
scaler = StandardScaler()
X_standardized = scaler.fit_transform(X)

# Apply LDA
lda = LinearDiscriminantAnalysis(n_components=2)
X_lda = lda.fit_transform(X_standardized, y)

# Apply PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_standardized)

# Plot the LDA and PCA results side-by-side for comparison
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

# LDA plot
colors = ['r', 'g', 'b']
for i, color, label in zip(range(len(target_names)), colors, target_names):
    ax1.scatter(X_lda[y == i, 0], X_lda[y == i, 1], alpha=0.8, color=color, label=label)
ax1.set_xlabel("LDA Component 1")
ax1.set_ylabel("LDA Component 2")
ax1.set_title("LDA: Iris Data Projection")
ax1.legend()

# PCA plot
for i, color, label in zip(range(len(target_names)), colors, target_names):
    ax2.scatter(X_pca[y == i, 0], X_pca[y == i, 1], alpha=0.8, color=color, label=label)
ax2.set_xlabel("PCA Component 1")
ax2.set_ylabel("PCA Component 2")
ax2.set_title("PCA: Iris Data Projection")
ax2.legend()

plt.suptitle("Comparison of LDA and PCA on the Iris Dataset")
plt.show()