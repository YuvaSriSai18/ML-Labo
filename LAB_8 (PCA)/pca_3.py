# -*- coding: utf-8 -*-
"""PCA_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L_h0WV0l6L9PPmlYp1sx8JSe9MtDK67_
"""

import pandas as pd
from sklearn.datasets import load_wine

# Load the Wine dataset
wine = load_wine()
X = wine.data
y = wine.target

# Create a DataFrame for EDA
df = pd.DataFrame(X, columns=wine.feature_names)
df['target'] = y
df.head()

from sklearn.model_selection import train_test_split

# Split the data into 70% training and 30% testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score

# Train Logistic Regression without PCA
baseline_model = LogisticRegression(max_iter=10000)
baseline_model.fit(X_train, y_train)

# Predict and evaluate the baseline model
y_pred_baseline = baseline_model.predict(X_test)

# Evaluate performance
baseline_accuracy = accuracy_score(y_test, y_pred_baseline)
baseline_precision = precision_score(y_test, y_pred_baseline, average='weighted')
baseline_recall = recall_score(y_test, y_pred_baseline, average='weighted')

print(f"Baseline Accuracy: {baseline_accuracy}")
print(f"Baseline Precision: {baseline_precision}")
print(f"Baseline Recall: {baseline_recall}")

from sklearn.decomposition import PCA

# Function to apply PCA and train the model
def apply_pca_and_train(n_components):
    pca = PCA(n_components=n_components)

    # Apply PCA to training data
    X_train_pca = pca.fit_transform(X_train)

    # Apply the same PCA transformation to test data
    X_test_pca = pca.transform(X_test)

    # Train Logistic Regression on PCA-reduced data
    model = LogisticRegression(max_iter=10000)
    model.fit(X_train_pca, y_train)

    # Predict and evaluate the model
    y_pred_pca = model.predict(X_test_pca)

    accuracy = accuracy_score(y_test, y_pred_pca)
    precision = precision_score(y_test, y_pred_pca, average='weighted')
    recall = recall_score(y_test, y_pred_pca, average='weighted')

    return accuracy, precision, recall

# Test different numbers of components
components_list = [2, 5, 10]
results = {}

for n in components_list:
    accuracy, precision, recall = apply_pca_and_train(n)
    results[n] = {'Accuracy': accuracy, 'Precision': precision, 'Recall': recall}
    print(f"PCA with {n} components: Accuracy={accuracy}, Precision={precision}, Recall={recall}")

import matplotlib.pyplot as plt

# Plot accuracy vs number of PCA components
components = list(results.keys())
accuracies = [results[n]['Accuracy'] for n in components]

plt.figure(figsize=(8, 6))
plt.plot(components, accuracies, marker='o')
plt.title('Accuracy vs Number of PCA Components')
plt.xlabel('Number of PCA Components')
plt.ylabel('Accuracy')
plt.grid(True)
plt.show()